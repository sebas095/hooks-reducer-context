{"version":3,"sources":["img/react-hooks.png","img/chrono.png","utils/combine-reducers.js","store/reducers/counter.reducer.js","store/types/counter.type.js","store/store.js","store/reducers/chrono.reducer.js","store/types/chrono.types.js","components/menu.jsx","components/counter.jsx","store/actions/counter.action.js","components/chronometer.jsx","store/actions/chrono.action.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducers","reducer","state","action","type","count","initialState","counter","chrono","hours","minutes","seconds","miliseconds","allTimestamps","running","started","rootReducer","counterReducer","payload","Object","keys","reduce","acc","Context","createContext","Store","children","useReducer","dispatch","contextValue","useMemo","Provider","value","Container","styled","div","Img","img","MenuContainer","LinkStyled","Link","Menu","src","reactHooksImg","alt","to","CountContainer","ButtonContainer","Button","button","CountStyled","Counter","useContext","onClick","Time","h3","disabled","List","ul","Item","li","Chronometer","useEffect","interval","setInterval","tick","clearInterval","updateTime","addZero","chronoImg","map","time","idx","key","id","GloablStyle","createGlobalStyle","Back","App","location","useLocation","console","log","pathname","process","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6885293f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-hooks.bb1e80ec.png\";","module.exports = __webpack_public_path__ + \"static/media/chrono.ef6f7de5.png\";","export const combineReducers = (reducers) => (state, action) => {\n  return Object.keys(reducers).reduce(\n    (acc, reducer) => ({\n      ...acc,\n      [reducer]: reducers[reducer](acc[reducer], action),\n    }),\n    state\n  );\n};\n","import { DECREMENT, INCREMENT } from \"../types\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n\n    case DECREMENT:\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n","import React, { createContext, useReducer, useMemo } from \"react\";\n\nimport { combineReducers } from \"../utils/combine-reducers\";\nimport counterReducer from \"./reducers/counter.reducer\";\nimport chronoReducer from \"./reducers/chrono.reducer\";\n\nconst initialState = {\n  counter: {\n    count: 0,\n  },\n  chrono: {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    miliseconds: 0,\n    allTimestamps: [],\n    running: false,\n    started: false,\n  },\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  chrono: chronoReducer,\n});\n\nexport const Context = createContext();\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  // Performance Concerns\n  const contextValue = useMemo(() => {\n    return { state, dispatch };\n  }, [state, dispatch]);\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n};\n\nexport default Store;\n","import { START, STOP, RESET, TIMESTAMP, UPDATE_TIME } from \"../types\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case START:\n      return {\n        ...state,\n        running: true,\n        started: true,\n      };\n\n    case STOP:\n      return {\n        ...state,\n        running: false,\n      };\n\n    case RESET:\n      return {\n        ...state,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        miliseconds: 0,\n        allTimestamps: [],\n        running: false,\n        started: false,\n      };\n\n    case TIMESTAMP:\n      return {\n        ...state,\n        allTimestamps: [\n          ...state.allTimestamps,\n          {\n            hours: state.hours,\n            minutes: state.minutes,\n            seconds: state.seconds,\n            miliseconds: state.miliseconds,\n          },\n        ],\n      };\n\n    case UPDATE_TIME:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const STOP = \"STOP\";\nexport const START = \"START\";\nexport const RESET = \"RESET\";\nexport const TIMESTAMP = \"TIMESTAMP\";\nexport const UPDATE_TIME = \"UPDATE_TIME\";\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nimport reactHooksImg from \"../img/react-hooks.png\";\n\nconst Container = styled.div`\n  min-height: 100vh;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Img = styled.img`\n  width: 640px;\n  height: 320px;\n\n  @media (max-width: 360px) {\n    width: 320px;\n    height: 160px;\n  }\n`;\n\nconst MenuContainer = styled.div`\n  min-height: 150px;\n  width: 400px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-direction: column;\n  background: whitesmoke;\n  border-radius: 15px;\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n`;\n\nconst LinkStyled = styled(Link)`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 5px;\n  text-decoration: none;\n  color: #3f93ff;\n  font-weight: bold;\n  text-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  font-size: 2.5rem;\n\n  &:first-child {\n    margin-bottom: 20px;\n  }\n\n  &:hover {\n    background-color: #3f93ff;\n    color: whitesmoke;\n  }\n`;\n\nconst Menu = () => (\n  <Container>\n    <Img src={reactHooksImg} alt=\"React Hooks\" />\n    <MenuContainer>\n      <LinkStyled to=\"/counter\">\n        <span>Counter</span>\n      </LinkStyled>\n      <LinkStyled to=\"/chrono\">\n        <span>Chronometer</span>\n      </LinkStyled>\n    </MenuContainer>\n  </Container>\n);\n\nexport default Menu;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Context } from \"../store/store\";\nimport { increment, decrement } from \"../store/actions\";\n\nconst CountContainer = styled.div`\n  color: #3f93ff;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100vh;\n  text-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n`;\n\nconst ButtonContainer = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n`;\n\nconst Button = styled.button`\n  background-color: #3f93ff;\n  width: 80px;\n  height: 80px;\n  border: none;\n  border-radius: 50%;\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n\n  &:first-child {\n    margin-right: 40px;\n  }\n\n  &:hover {\n    color: #3f93ff;\n    background-color: white;\n  }\n`;\n\nconst CountStyled = styled.div`\n  font-size: 150px;\n  font-weight: bold;\n`;\n\nconst Counter = () => {\n  const { state, dispatch } = useContext(Context);\n  const { count } = state.counter;\n\n  return (\n    <CountContainer>\n      <h1>My Counter Example with hooks!</h1>\n      <ButtonContainer>\n        <Button onClick={() => dispatch(decrement())}>-</Button>\n        <Button onClick={() => dispatch(increment())}>+</Button>\n      </ButtonContainer>\n      <CountStyled>{count}</CountStyled>\n    </CountContainer>\n  );\n};\n\nexport default Counter;\n","import { DECREMENT, INCREMENT } from \"../types\";\n\nexport const increment = () => ({\n  type: INCREMENT,\n});\n\nexport const decrement = () => ({\n  type: DECREMENT,\n});\n","import React, { useContext, useEffect } from \"react\";\nimport { generate as id } from \"shortid\";\nimport styled from \"styled-components\";\n\nimport { Context } from \"../store/store\";\nimport { start, stop, reset, timestamp, updateTime } from \"../store/actions\";\n\nimport chronoImg from \"../img/chrono.png\";\n\nconst Container = styled.div`\n  font-size: 2rem;\n  font-weight: bold;\n  margin-top: 25px;\n`;\n\nconst Img = styled.img`\n  width: 150px;\n  height: 150px;\n`;\n\nconst Time = styled.h3`\n  text-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n`;\n\nconst Button = styled.button`\n  background-color: ${({ disabled }) => (disabled ? \"transparent\" : \"#387EF5\")};\n  border: ${({ disabled }) => (disabled ? \"1px solid #387EF5\" : \"none\")};\n  outline: none;\n  font-weight: bold;\n  font-size: 1rem;\n  border-radius: 15px;\n  padding: 0.5rem;\n  margin: 0.5rem;\n  color: ${({ disabled }) => (disabled ? \"#444\" : \"#FFF\")};\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  padding-left: 0;\n`;\n\nconst Item = styled.li`\n  text-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n`;\n\nconst Chronometer = () => {\n  const { state, dispatch } = useContext(Context);\n  let {\n    hours,\n    minutes,\n    seconds,\n    miliseconds,\n    allTimestamps,\n    started,\n    running,\n  } = state.chrono;\n\n  useEffect(() => {\n    if (running) {\n      const interval = setInterval(tick, 100);\n      return () => clearInterval(interval);\n    }\n  }, [running]);\n\n  const tick = () => {\n    miliseconds++;\n\n    if (miliseconds === 10) {\n      miliseconds = 0;\n      seconds++;\n    }\n\n    if (seconds === 60) {\n      seconds = 0;\n      minutes++;\n    }\n\n    if (minutes === 60) {\n      minutes = 0;\n      hours++;\n    }\n\n    dispatch(updateTime(hours, minutes, seconds, miliseconds));\n  };\n\n  const addZero = (value) => (value < 10 ? `0${value}` : value);\n\n  return (\n    <Container>\n      <Img src={chronoImg} alt=\"Chrono\" />\n      <Time>\n        {` \n          ${addZero(hours)} : \n          ${addZero(minutes)} : \n          ${addZero(seconds)} : \n          ${addZero(miliseconds)}\n        `}\n      </Time>\n      <Button disabled={running} onClick={() => dispatch(start())}>\n        START\n      </Button>\n      <Button disabled={!running} onClick={() => dispatch(stop())}>\n        STOP\n      </Button>\n      <Button disabled={!running} onClick={() => dispatch(timestamp())}>\n        TIMESTAMP\n      </Button>\n      {started && (\n        <Button disabled={running} onClick={() => dispatch(reset())}>\n          RESET\n        </Button>\n      )}\n\n      <List>\n        {allTimestamps.map((time, idx) => (\n          <Item key={id()}>\n            {`\n              ${idx + 1} - \n              ${addZero(time.hours)} : \n              ${addZero(time.minutes)} : \n              ${addZero(time.seconds)} :\n              ${addZero(time.miliseconds)}\n            `}\n          </Item>\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nexport default Chronometer;\n","import { START, STOP, RESET, TIMESTAMP, UPDATE_TIME } from \"../types\";\n\nexport const start = () => ({\n  type: START,\n});\n\nexport const stop = () => ({\n  type: STOP,\n});\n\nexport const reset = () => ({\n  type: RESET,\n});\n\nexport const timestamp = () => ({\n  type: TIMESTAMP,\n});\n\nexport const updateTime = (hours, minutes, seconds, miliseconds) => ({\n  type: UPDATE_TIME,\n  payload: { hours, minutes, seconds, miliseconds },\n});\n","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\n\nimport Store from \"./store/store\";\nimport Menu from \"./components/menu\";\nimport Counter from \"./components/counter\";\nimport Chronometer from \"./components/chronometer\";\n\nconst GloablStyle = createGlobalStyle`\n body {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n    background-color: #f5f5dc;\n    text-align: center;\n    margin: 0;\n  }\n`;\n\nconst Container = styled.div`\n  width: 100vw;\n  display: inline-block;\n  text-align: left;\n  margin-left: 10px;\n  margin-top: 10px;\n`;\n\nconst Back = styled(Link)`\n  text-shadow: 0 2px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  text-decoration: none;\n  color: #3f93ff;\n  font-weight: bold;\n  font-size: 1.5rem;\n`;\n\nconst App = () => {\n  const location = useLocation();\n  console.log(location.pathname);\n  console.log(process.env.REACT_APP_BASENAME);\n\n  return (\n    <>\n      <GloablStyle />\n      <Store>\n        {location.pathname !== process.env.REACT_APP_BASENAME && (\n          <Container>\n            <Back to=\"/\"> 🔙 </Back>\n          </Container>\n        )}\n        <Switch>\n          <Route exact path=\"/\">\n            <Menu />\n          </Route>\n\n          <Route path=\"/counter\">\n            <Counter />\n          </Route>\n\n          <Route path=\"/chrono\">\n            <Chronometer />\n          </Route>\n        </Switch>\n      </Store>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.REACT_APP_BASENAME}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}